password usada mysql y admin asdf5742k
- hay comandos para usar permisos para evitar crear nuevas migraciones o lo que sea: php artisan permission:create-role writer
  describidos en https://spatie.be/docs/laravel-permission/v5/basic-usage/artisan



- para levantar el sv se usa php artisan serve

- la ruta siempre usara api de manera automatica al hacer una api en laravel "http://127.0.0.1:8000/api/artists

- no se usa el metodo create en el controllador porque este es para webs tradicionales, para api rest
  se usaria el metodo store para crear

- para eliminar algun dato de las tablas en laravel al parecer debes crear una migracion
  y eliminar desde la funcion up en el archivo de migracion que se cree usando php artisan make:migration
  este es el ejemplo:     public function up(): void
    {
        //
        Schema::table('songs', function (Blueprint $table) {
            $table->dropColumn('genres');
        });
  y luego migrar php artisan migrate

- para crear un modelo se usa php artisan make:model Genres -mcr y de ahi en la seccion database/migrations 
  buscar el modelo creado y modificar los datos para el modelo deseado a crear,

- para crear relacion de un modelo a otro se usa php artisan make:migration create_artists_genres_table 
  para crear una migracion entre 2 modelos ya creados anteriormente (artist y genres)
  dentro de database/migrations se debe buscar la funcion up y agregar las referencias de las 2 tablas
      public function up(): void
    {
        Schema::create('songs_artists', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('artist_id');
            $table->foreign('artist_id')->references('id')->on('artists');
            $table->unsignedBigInteger('song_id');
            $table->foreign('song_id')->references('id')->on('songs');
            $table->timestamps();
        });
    }
 ahora nos vamos a la seccion models artist y songs y agregamos algo similar a  
	esto dentro del modelo songs   
    public function artists(): BelongsToMany
      {
         return $this->belongsToMany(Artist::class);
      }
  y caso contrario en el modelo artist donde se usaria songs()
 (ahora en caso de relacion de 2 pero para 3 tablas, como en el caso artist songs y genres, esto se haria
 solo dentro de artist y songs (con genres() ), si se usara dentro de genres es porque necesitarias 
 obtener los artistas o canciones pertenecientes a un genero)

 y finalmente se ejecutara la migracion con php artisan migrate

 ahora los controladores
 dentro de app/http/controllers:

 En el controlador, define los métodos correspondientes a las acciones que deseas realizar para tu recurso.
 Aquí tienes algunos ejemplos de métodos comunes en una API:

 index: Recupera una colección de recursos.
 show: Recupera un recurso específico.
 store: Almacena un nuevo recurso.
 update: Actualiza un recurso existente.
 destroy: Elimina un recurso existente.


--- ---- EJEMPLO DE LO QUE SE  VERIA SI TIENES REQUERIMIENTOS DE PERMISOS O AUTENTICACION PARA CIERTOS METODOS ----------------------
class UserController extends Controller
{
    
    public function __construct()
    {
        //
        $this->middleware('auth:api', ['except' => ['index','login','show','register']]);
        $this->middleware('role:admin',['only' => ['update','destroy','assignRole','removeRole']]);
    } 
-----------------------------------------------------------------------------------------
----------- EJEMPLOS DEL CONTROLADOR ---------------------
public function index()
    {
        $artists = Artist::all();

        $data = [
            'message' => 'Artists Details',
            'artists' => $artists,
        ];

        return response()->json($data);
    }

public function show($id)
    {
        $artist = Artist::findOrFail($id);

        $data = [
            'message' => 'Artist Details',
            'artist' => $artist,
        ];

        return response()->json($data);
    }

public function store(Request $request)
    {
        try {
            $request->validate([
                'name' => 'required',
                'genre' => 'required',
            ]);

            $artist = new Artist();
            $artist->name = $request->name;
            $artist->genre = $request->genre;
            $artist->save();

            $data = [
                'message' => 'Artist created successfully',
                'artist' => $artist,
            ];

            return response()->json($data, 201);
        } catch (ValidationException $e) {
            $data = [
                'message' => 'Validation error',
                'errors' => $e->errors(),
            ];

            return response()->json($data, 422);
        } catch (\Exception $e) {
            $data = [
                'message' => 'Failed to create artist',
                'error' => $e->getMessage(),
            ];

            return response()->json($data, 500);
        }
    }

public function update(Request $request, $id)
    {
        try {
            $request->validate([
                'name' => 'required',
                'genre' => 'required',
            ]);

            $artist = Artist::findOrFail($id);
            $artist->name = $request->name;
            $artist->genre = $request->genre;
            $artist->save();

            $data = [
                'message' => 'Artist updated successfully',
                'artist' => $artist,
            ];

            return response()->json($data);
        } catch (ValidationException $e) {
            $data = [
                'message' => 'Validation error',
                'errors' => $e->errors(),
            ];

            return response()->json($data, 422);
        } catch (\Exception $e) {
            $data = [
                'message' => 'Failed to update artist',
                'error' => $e->getMessage(),
            ];

            return response()->json($data, 500);
        }
    }

public function destroy($id)
    {
        try {
            $artist = Artist::findOrFail($id);
            $artist->delete();

            $data = [
                'message' => 'Artist deleted successfully',
            ];

            return response()->json($data);
        } catch (\Exception $e) {
            $data = [
                'message' => 'Failed to delete artist',
                'error' => $e->getMessage(),
            ];

            return response()->json($data, 500);
        }
    }
--- EJEMPLO DE UNIR TABLAS EN EL CONTROLADOR --------------------------------------------
public function attachsong(Request $request)
    {
        try {
            $User = User::find($request->user_id);
    
            // Verificar si ya existe la unión entre el User y la canción
            if ($User->songs()->where('song_id', $request->song_id)->exists()) {
                $message = 'Song already attached to the User';
            } else {
                // Unir la canción al User sin duplicación
                $User->songs()->syncWithoutDetaching($request->song_id);
                $message = 'Song attached successfully';
            }
    
            $data = [
                'message' => $message,
                'User' => $User
            ];
    
            return response()->json($data);
        } catch (Exception $e) {
            $error = "Failed to attach User/song: " . $e->getMessage();
            return response()->json($error);
            // Realiza las acciones necesarias para manejar este error
        }
    }
----------------------------------------------------------------------------------
 finalmente configurar las rutas dentro de routes/api 
 (recuerda que las llamas de metodos usan obligatoriamente "api" y opcionalmente algun otro ademas de ese
  si )

--------------------------------------------- ERRORES --- -------------------------------------------------------------------------------
- MusicPhp tuve que remover ; de las lineas ;extension=fileinfo y ;extension=zip 
  del archivo php.ini de donde esta instalado php, para poder instalar laravel con 
  composer correctamente removido ; de ;extension=pdo_mysql para poder realizar las 
  migraciones en laravel



 ERROR DE SUBIR ARCHIVOS TUVE QUE AUMENTAR EL TAMAÑO DE ARCHIVOS SUBIDOS DE 2M A 100M O DABA ERROR 
 busca en php.ini esto y cambia el 2M a 100M que estará abajo: Maximum allowed size 
 Failed to open stream: Permission denied

- Error descubierto, put con archivos no funciona en laravel correctamente, por lo que hay que enmascarar la peticion post para que la trate como put, este es un ejemplo usando axios en vueJs: .post('http://127.0.0.1:8000/api/songs/put/2', formData, {
          headers: {
            'Content-Type': 'multipart/form-data',
            'X-HTTP-Method-Override': 'PUT'
          }
        })
 donde formdata contiene el archivo (de musica en el caso) y el nombre de cancion 