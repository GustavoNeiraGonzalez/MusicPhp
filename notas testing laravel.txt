de por si laravel ya contiene de por si una carpeta de testing

y en la carpeta feature: que es donde se haran pruebas con metodos https

y la carpeta unit: donde se probará clases y metodos sin hacer peticiones https

comando:

 vendor/bin/phpunit
con este comando probando los tests

php artisan make:test ArtistModuleTest
con este comando creamos un archivo para testear, en este caso con nombre
ArtistModuleTest. se creará en la carpeta features de tests

este es el formato para testear que la respuesta este ok de la peticion
IMPORTANTE AGREGAR @test

    /**
     * @test
     */
    public function TestGetArtistInfo(): void
    {
        $response = $this->get('/api/artists/get/6')
                        ->assertStatus(200);
    }

IMPORTANTE: USE REFRESHDATABASE 
ELIMINA LOS DATOS DE LA BDD, (se agregaria delante de test)
ES OPCIONAL SABIENDO QUE EN UNA BASE DE DATOS RELACIONAL 
NECESITAS ELIMINAR DATOS DE OTRAS TABLAS TAMBIEN, y algunas
dara error, 	

---------------------------------------------
FACTORIES / FACTORY
Con esto podemos hacer para crear datos de prueba aleatorios 
para el testing

para crear un archivo factory
1)php artisan make:factory ArtistFactory --model=Artist

el archivo se veria asi:

class ArtistFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            //
            'name' => fake()->name(),
            'description' => fake()->text()
        ];
    }
}
donde desde return viene los datos del modelo Artist, para luego ser 
rellenados automaticamente

aqui te das una idea de los tipos de datos que hay, aunque en este caso
no se usa faker por defecto si no fake(), lo cual es raro
https://github.com/fzaninotto/Faker

2) NOTA:Luego de hacer cambios en el archivo factory, es necesario migrar
con el comando:  php artisan migrate 
para que hagan efecto

ahora tienes en la cmd poner:    php artisan tinker
y dentro de tinker puedes rellenar los datos con 
Artist::factory()->count(1)->create()  

3) crear un seeder, con datos de prueba automaticamente
comando:
-php artisan make:seeder ArtistSeeder

para ahora rellenar la db con los datos con el seeder ya
 creado es:
php artisan db:seed
o para un seed en especifico
-php artisan db:seed --class=NombreDelSeeder

aqui hay un ejemplo del seeder normal con datos rellenados automaticamente
segun la configuracion del factory, y otra con datos escritos en seeder,
esta ultima habria que probarla, aun no se si funciona
class ArtistSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        //
        \App\Models\Artist::factory(1)->create();
        \App\Models\Artist::factory()->create([
            'name' => 'Test User',
            'desription' => 'test example ;D',
            ]);
    }
    
}


4)ahora, para hacer seeds con tablas que tienen relaciones entre si y que sirve el
el caso ademas tienen tablas intermedias,
(ESTO SE HARA EN EL SEEDER Y RECUERDA TENER LOS 2 FACTORYS CREADOS Y CONFIGURADOS)
En el seeder seria algo asi, donde el seeder es para crear una cancion, esta cancion
esta ligada a 1 artista, por lo que count es 1, si tuviese mas de 1 se aumentaria este
numero

use App\Models\Artist;
use App\Models\Song;

    public function run(): void
    {
        //
        $user = Song::factory()
            ->has(Artist::factory()->count(1))
            ->create();
    }

NOTA: Al parecer hacer falsas base de datos se debe hacer de otra forma y no parece
necesario de aprender

5) TESTEAR LOS DATOS, COMO UNA PETICION GET,
 VAS A LOS TEST QUE CREAMOS ANTES O CREAS OTRO TEST Y PROBAMOS TANTO LA PETICION
 QUE SEA CORRECTA COMO EL TIPO DE DATO TAMBIEN CON ALGUN DATO DE PRUEBA

   public function TestGetArtistInfo(): void
    {
        $Artist = [
            "Artist"=>[

                "name"=>"Fae Littel II",
            ]
            ];
        $response = $this->get('/api/artists/get/2');
 
        $response
            ->assertStatus(200)
            ->assertJson($Artist);
    }

AQUI $Artist es para tener la variable array a probar para mayor legibilidad
     $response es la peticion, probamos la respuesta que sea correcta (200)
     (si te devuelve otra respuesta es mejor que veas que significan los codigos
     https)
     tambien se prueba que la respuesta del artista con id 2 devuelva una artista
     con nombre Fae Littel II especificamente

NOTA: LA FUNCION PARA LA PETICION GET SE DEBE CREAR, COSA QUE ESTA EN EL OTRO TXT

tambien se puede hacer verificar varias cosas aqui un ejemplo (no de artists):

        ->assertJson(fn (AssertableJson $json) =>
            $json->where('id', 1)
                 ->where('name', 'Victoria Faith')
                 ->where('email', fn ($email) => str($email)->is('victoria@gmail.com'))
                 ->whereNot('status', 'pending')
                 ->missing('password')
                 ->etc()
        );

mas info en : https://laravel.com/docs/9.x/http-tests#customizing-request-headers