de por si laravel ya contiene de por si una carpeta de testing

y en la carpeta feature: que es donde se haran pruebas con metodos https

y la carpeta unit: donde se probará clases y metodos sin hacer peticiones https

comando:

 vendor/bin/phpunit
con este comando probando los tests

php artisan make:test ArtistModuleTest
con este comando creamos un archivo para testear, en este caso con nombre
ArtistModuleTest. se creará en la carpeta features de tests

este es el formato para testear que la respuesta este ok de la peticion
IMPORTANTE AGREGAR @test
    /**
     * @test
     */
    public function TestGetArtistInfo(): void
    {
        $response = $this->get('/api/artists/get/6')
                        ->assertStatus(200);
    }

---------------------------------------------
FACTORIES / FACTORY
Con esto podemos hacer una falsa base de datos para no tener que usar la
base de datos real.

para crear un archivo factory
1)php artisan make:factory ArtistFactory --model=Artist

el archivo se veria asi:

class ArtistFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            //
            'name' => fake()->name(),
            'description' => fake()->text()
        ];
    }
}
donde desde return viene los datos del modelo Artist, para luego ser 
rellenados automaticamente

aqui te das una idea de los tipos de datos que hay, aunque en este caso
no se usa faker por defecto si no fake(), lo cual es raro
https://github.com/fzaninotto/Faker

2) NOTA:Luego de hacer cambios en el archivo factory, es necesario migrar
con el comando:  php artisan migrate 
para que hagan efecto

ahora tienes en la cmd poner:    php artisan tinker
y dentro de tinker puedes rellenar los datos con 
Artist::factory()->count(1)->create()  

3) crear un seeder, que es para rellenar la db falsa con datos automaticamente
comando:
-php artisan make:seeder ArtistSeeder

para ahora rellenar la db con los datos con el seeder ya
 creado es:
php artisan db:seed
o para un seed en especifico
-php artisan db:seed --class=NombreDelSeeder

ahora, para hacer seeds con tablas que tienen relaciones entre si y que sirve el
el caso ademas tienen tablas intermedias,
(ESTO SE HARA EN EL SEEDER Y RECUERDA TENER LOS 2 FACTORYS CREADOS Y CONFIGURADOS)
En el seeder seria algo asi, donde el seeder es para crear una cancion, esta cancion
esta ligada a 1 artista, por lo que count es 1, si tuviese mas de 1 se aumentaria este
numero

    public function run(): void
    {
        //
        $user = Song::factory()
            ->has(Artist::factory()->count(1))
            ->create();
    }