de por si laravel ya contiene de por si una carpeta de testing

y en la carpeta feature: que es donde se haran pruebas con metodos https
-----------------------------------------------------------------------------------------------
-primero, PARA CREAR UNA BASE DE DATOS FALSA EN LARAVEL debemos configurarla en el 
 archivo "phpunit.xml" aqui abran 2 lineas comentadas, debemos descomentarlas para
 usar una base de datos por defecto SQLite, 
 estas serian las 2 lineas:
        <env name="DB_CONNECTION" value="sqlite"/>   
        <env name="DB_DATABASE" value=":memory:"/>   
-AHORA SI QUEREMOS, QUE ES LO MAS PROBABLE, UNA BD DE PRUEBAS MYSQL NECESITAMOS 
 ESPECIFICAR ALLÍ LA CONEXION QUE YA TENEMOS CON LA BDD PERO CAMBIANDO 
DB_DATABASE POR EL NOMBRE DE LA BD DE PRUEBA, Y EN DB_CONNECTION PONER mysql
	DB_CONNECTION=mysql
	DB_DATABASE=musicTesting
-adicional, en lugar de hacer esto
 podemos crear una copia de .env, y desde ahi cambiar esos valores, dejando comentado
 lo que habia antes en phpunit.xml
 Y LO QUE DEBEMOS ES COPIAR EL .env y ponerle de nombre .env.testing
2)CREAR LA COPIA DE LA BD MYSQL, SE ME OCURREN 2 OPCIONES, crear un esquema con el 
  nombre de la bd de prueba y ejecutar las migraciones (no lo he probado)
  y la que me funciono, fue de la bd original, voy a server > data export 
	(RECUERDA QUITAR EL OUTPUT DE ABAJO QUE TE TAPA TODO)
  eligo la bd original, alado del boton select views, en la casilla debe poner
  "dump structure and data" luego marcar las 3 casillas de objects to export
  luego marcas las casillas export to self-contained, eliges donde guardarlo,
  y marcas include create schema,  arriba en object selection le das a export progress  
  y le das  a start export, 
  luego finalmente le das arriba en file, eliges open script, y ahi le cambias el nombre
  a la bd por la de prueba, ylisto
-----------------------------------------------------------------------------------
y la carpeta unit: donde se probará clases y metodos sin hacer peticiones https

comando:


con este comando crea los tests

php artisan make:test ArtistModuleTest
con este comando creamos un archivo para testear, en este caso con nombre
ArtistModuleTest. se creará en la carpeta features de tests

este es el formato para testear que la respuesta este ok de la peticion
IMPORTANTE AGREGAR @test

    /**
     * @test
     */
    public function TestGetArtistInfo(): void
    {
        $response = $this->get('/api/artists/get/6')
                        ->assertStatus(200);
    }

IMPORTANTE: USE REFRESHDATABASE 
ELIMINA Las tablas de la BDD, (se agregaria delante de test)
es opcional y ejecutara tambien las migraciones, yo tenia errores
en las migraciones asi que me dio errores

---------------------------------------------
FACTORIES / FACTORY
Con esto podemos hacer para crear datos de prueba aleatorios 
para el testing

para crear un archivo factory
1)php artisan make:factory ArtistFactory --model=Artist

el archivo se veria asi:

class ArtistFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            //
            'name' => fake()->name(),
            'description' => fake()->text()
        ];
    }
}
donde desde return viene los datos del modelo Artist, para luego ser 
rellenados automaticamente

aqui te das una idea de los tipos de datos que hay, aunque en este caso
no se usa faker por defecto si no fake(), lo cual es raro
https://github.com/fzaninotto/Faker

2) NOTA:Luego de hacer cambios en el archivo factory
me parecio ver que el comando para migrar surtia cambios, aunque hay que probar
quizas no ayuda en nada


ahora tienes en la cmd poner:    php artisan tinker
y dentro de tinker puedes rellenar los datos con 
Artist::factory()->count(1)->create()  

3) crear un seeder, con datos de prueba automaticamente
comando:
-php artisan make:seeder ArtistSeeder

para ahora rellenar la db con los datos con el seeder ya
 creado es:
php artisan db:seed
o para un seed en especifico
-php artisan db:seed --class=NombreDelSeeder

aqui hay un ejemplo del seeder normal con datos rellenados automaticamente
segun la configuracion del factory, y otra con datos escritos en seeder,
esta ultima habria que probarla, aun no se si funciona
class ArtistSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        //
        \App\Models\Artist::factory(1)->create();
        \App\Models\Artist::factory()->create([
            'name' => 'Test User',
            'desription' => 'test example ;D',
            ]);
    }
    
}


4)ahora, para hacer seeds con tablas que tienen relaciones entre si y que sirve el
el caso ademas tienen tablas intermedias,
(ESTO SE HARA EN EL SEEDER Y RECUERDA TENER LOS 2 FACTORYS CREADOS Y CONFIGURADOS)
En el seeder seria algo asi, donde el seeder es para crear una cancion, esta cancion
esta ligada a 1 artista, por lo que count es 1, si tuviese mas de 1 se aumentaria este
numero

use App\Models\Artist;
use App\Models\Song;

    public function run(): void
    {
        //
        $user = Song::factory()
            ->has(Artist::factory()->count(1))
            ->create();
    }


NOTA IMPORTANTE: PARA HACER LOS CAMBIOS EN LA BDD DE TEST, SE NECESITAN EJECUTAR LOS
SEEDERS DESDE LOS ARCHIVOS TEST, Y QUE ESTOS TAMBIEN ESTEN CONFIGURADOS PARA ESA BD TEST

5) TESTEAR LOS DATOS, COMO UNA PETICION GET,
 VAS A LOS TEST QUE CREAMOS ANTES O CREAS OTRO TEST Y PROBAMOS TANTO LA PETICION
 QUE SEA CORRECTA COMO EL TIPO DE DATO TAMBIEN CON ALGUN DATO DE PRUEBA

   public function TestGetArtistInfo(): void
    {
        $Artist = [
            "Artist"=>[

                "name"=>"Fae Littel II",
            ]
            ];
        $response = $this->get('/api/artists/get/2');
 
        $response
            ->assertStatus(200)
            ->assertJson($Artist);
    }

AQUI $Artist es para tener la variable array a probar para mayor legibilidad
     $response es la peticion, probamos la respuesta que sea correcta (200)
     (si te devuelve otra respuesta es mejor que veas que significan los codigos
     https)
     tambien se prueba que la respuesta del artista con id 2 devuelva una artista
     con nombre Fae Littel II especificamente

NOTA: LA FUNCION PARA LA PETICION GET SE DEBE CREAR, COSA QUE ESTA EN EL OTRO TXT

tambien se puede hacer verificar varias cosas aqui un ejemplo (no de artists):

        ->assertJson(fn (AssertableJson $json) =>
            $json->where('id', 1)
                 ->where('name', 'Victoria Faith')
                 ->where('email', fn ($email) => str($email)->is('victoria@gmail.com'))
                 ->whereNot('status', 'pending')
                 ->missing('password')
                 ->etc()
        );

mas info en : https://laravel.com/docs/9.x/http-tests#customizing-request-headers

1)PROBAR UNA PETICION QUE REQUIERE QUE ESTES LOGEADO, cabe destacar que encontre errores en como
proteger una peticion http con el login, se debe agregar en la peticion en el archivo api
->middleware('auth:api');

AHORA CUANDO QUIERES HACER LA PETICION CON ESE REQUERIMIENTO SE HACE ALGO ASI 
    public function TestGenrePost(): void
    {   
        $user = User::factory()->create();
        $genre = 'Rock';
        $response = $this->actingAs($user)->post('/api/genre/post',[
            "genre"=>$genre
        ]);

        $response->assertStatus(200);
    } 

esta funcion crea un user y lo usa para estar logeado y hacer la peticion, la cual
creará un genero, en este caso Rock. recuerda que las claves para hacer que este logeado
en este test es $user

2) PARA VERIFICAR QUE LA PETICION HTTP DE LOGEO ESTE CORRECTO, SE HACE DE ESTA FORMA

public function TestLoginUserWithMethod(): void
    {   
        $this->seed(DatabaseSeeder::class);
        $userEmail = 'user@user.com';
        $userPassword ='password'; //si los junto como array, realmente 
        //funciona el test 

        $response = $this->post('/api/auth/users/login',[
            "email"=>$userEmail, "password"=>$userPassword
        ]);

        $response->assertStatus(200);
    }

En este caso useremail y userpassword son identificaciones de un usuario que se crea con
los factories y seeder, ya conocemos su nombre y logearemos con ellos, 
NOTA: HACER UNA FUNCION ARRAY PARA AGRUPAR USEREMAIL Y USERPASSWORD DA ERROR, POR ESO
      son variables separadas y escritas de esa forma en el codigo
(esto verifica que se pueda logear, no es para que se use el jwt en otros test, si quieres
hacer eso tienes que ir al paso 1 que esta una mas arriba)

----
PARA TESTEAR UN ARCHIVO TESTING SE PUEDE USAR ESTE COMANDO

php artisan test .\tests\Feature\VisitsModuleTest.php

donde VisitsModuleTest.php es el archivo a testear y usar las funciones a probar